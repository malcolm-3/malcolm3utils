name: Draft a release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version number (e.g. 1.2.3) OR one of: patch|minor|major|prepatch|preminor|premajor|prerelease'
        required: true
        default: 'patch'

jobs:

  draft-release:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ACTION_APP_ID }}
          private-key: ${{ secrets.ACTION_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - uses: ./.github/actions/python-poetry-env
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ACTION_APP_ID }}
          private-key: ${{ secrets.ACTION_APP_PRIVATE_KEY }}
      - name: Update version
        id: updated_version
        shell: bash
        run: |
          poetry version ${{ github.event.inputs.version }}
          version=$(poetry version --short)
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Update changelog
        id: changelog
        shell: bash
        run: |
          poetry run kacl-cli release ${{ steps.updated_version.outputs.version }} --modify --auto-link
          body=$(poetry run kacl-cli get ${{ steps.updated_version.outputs.version }})

          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          {
            echo "body<<$EOF"
            echo "$body"
            echo "$EOF"
          } >> "$GITHUB_OUTPUT"
          echo "$body"
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'CHANGELOG.md pyproject.toml src/medutils/__init__.py'
          message: 'Release ${{ steps.updated_version.outputs.version }}'
      - name: Create tag
        run: |
          git tag ${{ steps.updated_version.outputs.version }}
          git push origin ${{ steps.updated_version.outputs.version }}
      - name: Create a draft release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          token: ${{ env.GITHUB_TOKEN }}
          tag_name: ${{ steps.updated_version.outputs.version }}
          release_name: Release ${{ steps.updated_version.outputs.version }}
          body: ${{ steps.changelog.outputs.body }}
          draft: true
